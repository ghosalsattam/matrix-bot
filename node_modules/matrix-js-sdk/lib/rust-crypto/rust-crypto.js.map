{"version":3,"file":"rust-crypto.js","names":["RustSdkCryptoJs","_interopRequireWildcard","require","_logger","_CrossSigning","_RoomEncryptor","_OutgoingRequestProcessor","_KeyClaimManager","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","RustCrypto","constructor","olmMachine","http","_userId","_deviceId","_defineProperty2","outgoingRequestProcessor","OutgoingRequestProcessor","keyClaimManager","KeyClaimManager","stop","stopped","close","encryptEvent","event","_room","roomId","getRoomId","encryptor","roomEncryptors","Error","decryptEvent","res","decryptRoomEvent","JSON","stringify","event_id","getId","type","getWireType","sender","getSender","state_key","getStateKey","content","getWireContent","origin_server_ts","getTs","RoomId","clearEvent","parse","claimedEd25519Key","senderClaimedEd25519Key","senderCurve25519Key","forwardingCurve25519KeyChain","getEventEncryptionInfo","_event$getSenderKey","ret","senderKey","getSenderKey","undefined","algorithm","encrypted","authenticated","mismatchedSender","checkUserTrust","userId","UserTrustLevel","checkDeviceTrust","deviceId","DeviceTrustLevel","userHasCrossSigningKeys","prepareToEncrypt","room","ensureEncryptionSession","forceDiscardSession","_this$roomEncryptors$","exportRoomKeys","receiveSyncChanges","events","oneTimeKeysCounts","Map","unusedFallbackKeys","Set","result","DeviceLists","preprocessToDeviceMessages","preprocessOneTimeKeyCounts","preprocessUnusedFallbackKeys","onCryptoEvent","config","getContent","existingEncryptor","RoomEncryptor","members","getEncryptionTargetMembers","logger","debug","map","u","membership","updateTrackedUsers","UserId","onSyncCompleted","syncState","outgoingRequestLoop","onRoomMembership","member","oldMembership","enc","outgoingRequestLoopRunning","outgoingRequests","length","msg","makeOutgoingRequest","e","error","exports"],"sources":["../../src/rust-crypto/rust-crypto.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-js\";\n\nimport type { IEventDecryptionResult, IMegolmSessionData } from \"../@types/crypto\";\nimport type { IToDeviceEvent } from \"../sync-accumulator\";\nimport type { IEncryptedEventInfo } from \"../crypto/api\";\nimport { MatrixEvent } from \"../models/event\";\nimport { Room } from \"../models/room\";\nimport { RoomMember } from \"../models/room-member\";\nimport { CryptoBackend, OnSyncCompletedData } from \"../common-crypto/CryptoBackend\";\nimport { logger } from \"../logger\";\nimport { IHttpOpts, MatrixHttpApi } from \"../http-api\";\nimport { DeviceTrustLevel, UserTrustLevel } from \"../crypto/CrossSigning\";\nimport { RoomEncryptor } from \"./RoomEncryptor\";\nimport { OutgoingRequest, OutgoingRequestProcessor } from \"./OutgoingRequestProcessor\";\nimport { KeyClaimManager } from \"./KeyClaimManager\";\n\n/**\n * An implementation of {@link CryptoBackend} using the Rust matrix-sdk-crypto.\n */\nexport class RustCrypto implements CryptoBackend {\n    public globalErrorOnUnknownDevices = false;\n\n    /** whether {@link stop} has been called */\n    private stopped = false;\n\n    /** whether {@link outgoingRequestLoop} is currently running */\n    private outgoingRequestLoopRunning = false;\n\n    /** mapping of roomId â†’ encryptor class */\n    private roomEncryptors: Record<string, RoomEncryptor> = {};\n\n    private keyClaimManager: KeyClaimManager;\n    private outgoingRequestProcessor: OutgoingRequestProcessor;\n\n    public constructor(\n        private readonly olmMachine: RustSdkCryptoJs.OlmMachine,\n        http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n        _userId: string,\n        _deviceId: string,\n    ) {\n        this.outgoingRequestProcessor = new OutgoingRequestProcessor(olmMachine, http);\n        this.keyClaimManager = new KeyClaimManager(olmMachine, this.outgoingRequestProcessor);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // CryptoBackend implementation\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    public stop(): void {\n        // stop() may be called multiple times, but attempting to close() the OlmMachine twice\n        // will cause an error.\n        if (this.stopped) {\n            return;\n        }\n        this.stopped = true;\n\n        this.keyClaimManager.stop();\n\n        // make sure we close() the OlmMachine; doing so means that all the Rust objects will be\n        // cleaned up; in particular, the indexeddb connections will be closed, which means they\n        // can then be deleted.\n        this.olmMachine.close();\n    }\n\n    public async encryptEvent(event: MatrixEvent, _room: Room): Promise<void> {\n        const roomId = event.getRoomId()!;\n        const encryptor = this.roomEncryptors[roomId];\n\n        if (!encryptor) {\n            throw new Error(`Cannot encrypt event in unconfigured room ${roomId}`);\n        }\n\n        await encryptor.encryptEvent(event);\n    }\n\n    public async decryptEvent(event: MatrixEvent): Promise<IEventDecryptionResult> {\n        const roomId = event.getRoomId();\n        if (!roomId) {\n            // presumably, a to-device message. These are normally decrypted in preprocessToDeviceMessages\n            // so the fact it has come back here suggests that decryption failed.\n            //\n            // once we drop support for the libolm crypto implementation, we can stop passing to-device messages\n            // through decryptEvent and hence get rid of this case.\n            throw new Error(\"to-device event was not decrypted in preprocessToDeviceMessages\");\n        }\n        const res = (await this.olmMachine.decryptRoomEvent(\n            JSON.stringify({\n                event_id: event.getId(),\n                type: event.getWireType(),\n                sender: event.getSender(),\n                state_key: event.getStateKey(),\n                content: event.getWireContent(),\n                origin_server_ts: event.getTs(),\n            }),\n            new RustSdkCryptoJs.RoomId(event.getRoomId()!),\n        )) as RustSdkCryptoJs.DecryptedRoomEvent;\n        return {\n            clearEvent: JSON.parse(res.event),\n            claimedEd25519Key: res.senderClaimedEd25519Key,\n            senderCurve25519Key: res.senderCurve25519Key,\n            forwardingCurve25519KeyChain: res.forwardingCurve25519KeyChain,\n        };\n    }\n\n    public getEventEncryptionInfo(event: MatrixEvent): IEncryptedEventInfo {\n        // TODO: make this work properly. Or better, replace it.\n\n        const ret: Partial<IEncryptedEventInfo> = {};\n\n        ret.senderKey = event.getSenderKey() ?? undefined;\n        ret.algorithm = event.getWireContent().algorithm;\n\n        if (!ret.senderKey || !ret.algorithm) {\n            ret.encrypted = false;\n            return ret as IEncryptedEventInfo;\n        }\n        ret.encrypted = true;\n        ret.authenticated = true;\n        ret.mismatchedSender = true;\n        return ret as IEncryptedEventInfo;\n    }\n\n    public checkUserTrust(userId: string): UserTrustLevel {\n        // TODO\n        return new UserTrustLevel(false, false, false);\n    }\n\n    public checkDeviceTrust(userId: string, deviceId: string): DeviceTrustLevel {\n        // TODO\n        return new DeviceTrustLevel(false, false, false, false);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // CryptoApi implementation\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    public globalBlacklistUnverifiedDevices = false;\n\n    public async userHasCrossSigningKeys(): Promise<boolean> {\n        // TODO\n        return false;\n    }\n\n    public prepareToEncrypt(room: Room): void {\n        const encryptor = this.roomEncryptors[room.roomId];\n\n        if (encryptor) {\n            encryptor.ensureEncryptionSession();\n        }\n    }\n\n    public forceDiscardSession(roomId: string): Promise<void> {\n        return this.roomEncryptors[roomId]?.forceDiscardSession();\n    }\n\n    public async exportRoomKeys(): Promise<IMegolmSessionData[]> {\n        // TODO\n        return [];\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // SyncCryptoCallbacks implementation\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Apply sync changes to the olm machine\n     * @param events - the received to-device messages\n     * @param oneTimeKeysCounts - the received one time key counts\n     * @param unusedFallbackKeys - the received unused fallback keys\n     * @returns A list of preprocessed to-device messages.\n     */\n    private async receiveSyncChanges({\n        events,\n        oneTimeKeysCounts = new Map<string, number>(),\n        unusedFallbackKeys = new Set<string>(),\n    }: {\n        events?: IToDeviceEvent[];\n        oneTimeKeysCounts?: Map<string, number>;\n        unusedFallbackKeys?: Set<string>;\n    }): Promise<IToDeviceEvent[]> {\n        const result = await this.olmMachine.receiveSyncChanges(\n            events ? JSON.stringify(events) : \"[]\",\n            new RustSdkCryptoJs.DeviceLists(),\n            oneTimeKeysCounts,\n            unusedFallbackKeys,\n        );\n\n        // receiveSyncChanges returns a JSON-encoded list of decrypted to-device messages.\n        return JSON.parse(result);\n    }\n\n    /** called by the sync loop to preprocess incoming to-device messages\n     *\n     * @param events - the received to-device messages\n     * @returns A list of preprocessed to-device messages.\n     */\n    public preprocessToDeviceMessages(events: IToDeviceEvent[]): Promise<IToDeviceEvent[]> {\n        // send the received to-device messages into receiveSyncChanges. We have no info on device-list changes,\n        // one-time-keys, or fallback keys, so just pass empty data.\n        return this.receiveSyncChanges({ events });\n    }\n\n    /** called by the sync loop to preprocess one time key counts\n     *\n     * @param oneTimeKeysCounts - the received one time key counts\n     * @returns A list of preprocessed to-device messages.\n     */\n    public async preprocessOneTimeKeyCounts(oneTimeKeysCounts: Map<string, number>): Promise<void> {\n        await this.receiveSyncChanges({ oneTimeKeysCounts });\n    }\n\n    /** called by the sync loop to preprocess unused fallback keys\n     *\n     * @param unusedFallbackKeys - the received unused fallback keys\n     * @returns A list of preprocessed to-device messages.\n     */\n    public async preprocessUnusedFallbackKeys(unusedFallbackKeys: Set<string>): Promise<void> {\n        await this.receiveSyncChanges({ unusedFallbackKeys });\n    }\n\n    /** called by the sync loop on m.room.encrypted events\n     *\n     * @param room - in which the event was received\n     * @param event - encryption event to be processed\n     */\n    public async onCryptoEvent(room: Room, event: MatrixEvent): Promise<void> {\n        const config = event.getContent();\n\n        const existingEncryptor = this.roomEncryptors[room.roomId];\n        if (existingEncryptor) {\n            existingEncryptor.onCryptoEvent(config);\n        } else {\n            this.roomEncryptors[room.roomId] = new RoomEncryptor(\n                this.olmMachine,\n                this.keyClaimManager,\n                this.outgoingRequestProcessor,\n                room,\n                config,\n            );\n        }\n\n        // start tracking devices for any users already known to be in this room.\n        const members = await room.getEncryptionTargetMembers();\n        logger.debug(\n            `[${room.roomId} encryption] starting to track devices for: `,\n            members.map((u) => `${u.userId} (${u.membership})`),\n        );\n        await this.olmMachine.updateTrackedUsers(members.map((u) => new RustSdkCryptoJs.UserId(u.userId)));\n    }\n\n    /** called by the sync loop after processing each sync.\n     *\n     * TODO: figure out something equivalent for sliding sync.\n     *\n     * @param syncState - information on the completed sync.\n     */\n    public onSyncCompleted(syncState: OnSyncCompletedData): void {\n        // Processing the /sync may have produced new outgoing requests which need sending, so kick off the outgoing\n        // request loop, if it's not already running.\n        this.outgoingRequestLoop();\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Other public functions\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    /** called by the MatrixClient on a room membership event\n     *\n     * @param event - The matrix event which caused this event to fire.\n     * @param member - The member whose RoomMember.membership changed.\n     * @param oldMembership - The previous membership state. Null if it's a new member.\n     */\n    public onRoomMembership(event: MatrixEvent, member: RoomMember, oldMembership?: string): void {\n        const enc = this.roomEncryptors[event.getRoomId()!];\n        if (!enc) {\n            // not encrypting in this room\n            return;\n        }\n        enc.onRoomMembership(member);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Outgoing requests\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    private async outgoingRequestLoop(): Promise<void> {\n        if (this.outgoingRequestLoopRunning) {\n            return;\n        }\n        this.outgoingRequestLoopRunning = true;\n        try {\n            while (!this.stopped) {\n                const outgoingRequests: Object[] = await this.olmMachine.outgoingRequests();\n                if (outgoingRequests.length == 0 || this.stopped) {\n                    // no more messages to send (or we have been told to stop): exit the loop\n                    return;\n                }\n                for (const msg of outgoingRequests) {\n                    await this.outgoingRequestProcessor.makeOutgoingRequest(msg as OutgoingRequest);\n                }\n            }\n        } catch (e) {\n            logger.error(\"Error processing outgoing-message requests from rust crypto-sdk\", e);\n        } finally {\n            this.outgoingRequestLoopRunning = false;\n        }\n    }\n}\n"],"mappings":"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"}